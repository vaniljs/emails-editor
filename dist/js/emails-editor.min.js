"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function EmailsEditor(_ref) {
  var id = _ref.idElement,
      mailCounter = _ref.mailCounter,
      btnDeleteInvalid = _ref.btnDeleteInvalid,
      setEmail = _ref.setEmail;

  if (document.getElementById(id)) {
    // email list generate from array
    var generateEmailList = function generateEmailList() {
      emailListUl.innerHTML = "";
      emailArray.map(function (item) {
        var li = createEl('li'),
            classError = "";

        if (regxEmail.test(item)) {
          classError = "";
        } else {
          classError = "error";
        }

        li.innerHTML = "<span class='email__emailseditor ".concat(classError, "'>").concat(item, "</span><span class='delete_emailseditor'/>");
        emailListUl.append(li);
      });
    }; // delete email on click at button


    // add email to array
    var pushArrayEmail = function pushArrayEmail() {
      inputEmail.innerText.replace(/\r?\n?\s/g, "").split(",").map(function (item) {
        if (!emailArray.includes(item) && item && item !== placeholder.replace(/\r?\n?\s/g, "")) {
          emailArray = [].concat(_toConsumableArray(emailArray), [item]);
          inputEmail.innerHTML = "";
          generateEmailList();
        } else {
          inputEmail.innerHTML = "";
        }
      });
      mailCounter ? mailCount() : false;
    }; // footer


    var addEmailRandom = function addEmailRandom() {
      var login = "",
          strong = 5,
          dic = "abcdefghijklmnopqrstuvwxyz1234567890",
          randomDomain = Math.floor(Math.random() * domains.length);

      for (var i = 0; i < strong; i++) {
        login += dic.charAt(Math.floor(Math.random() * dic.length));
      }

      emailArray.push(login + "@" + domains[randomDomain]);
      generateEmailList();
      mailCount();
    }; // button Get Emails Count


    var mailCountCreate = function mailCountCreate() {
      if (mailCounter) {
        editorWrapper.before(inputCounter);
      }
    };

    var mailCount = function mailCount() {
      if (mailCounter) {
        inputCounter.innerText = emailArray.length;
      }
    }; // Option: button for delete all invalid email


    // Set a list of emails
    var setList = function setList() {
      if (setEmail) {
        for (var i = 0; i < setEmail; i++) {
          addEmailRandom();
        }
      }
    }; // Listener: delete


    var listenDeleteEmail = function listenDeleteEmail(e) {
      console.log("LISTENER. Deleted: " + e);
    }; // Listener: actual emails


    var haveEmails = function haveEmails(e) {
      console.log("LISTENER. Have emails: ");
      console.log(e);
    }; // Events onload page


    var emailArray = [],
        placeholder = "add more people...",
        domains = ["yandex.ru", "gmail.com", "mail.ru", "miro.com"],
        regxEmail = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/; // main wrapper

    var wrapperEmailsEditor = createEl('div', {
      'class': 'wrapper_emailseditor'
    }); // head wrapper

    var headWrapper = createEl('div', {
      'class': 'headwrapper_emailseditor'
    }); // head

    var headEmailsEditor = createEl('p', {
      'class': 'head_emailseditor'
    }, 'Share <b>Board name</b> with others');
    headWrapper.append(headEmailsEditor); // editor wrapper

    var editorWrapper = createEl('div', {
      'class': 'editorwrapper_emailseditor'
    });
    headWrapper.append(editorWrapper); // focus on the first click on empty editor wrapper

    editorWrapper.addEventListener("click", function () {
      if (inputEmail.querySelector('span') && inputEmail.querySelector('span').innerHTML === placeholder) {
        inputEmail.innerHTML = "";
        inputEmail.focus();
      }
    }); // focus on the switch tab browser. otherwise placeholder is sent to the email list

    window.addEventListener("visibilitychange", function () {
      inputEmail.blur();
    }); // insert ul

    var emailListUl = createEl('ul');
    editorWrapper.append(emailListUl);
    document.getElementById(id).addEventListener("click", function (el) {
      if (el.target.classList.contains('delete_emailseditor')) {
        var email = el.target.parentNode.querySelector('.email__emailseditor').innerHTML;
        listenDeleteEmail(email);
        el.target.parentNode.remove();
        var indexEmail = emailArray.findIndex(function (currentValue) {
          return currentValue === email;
        });
        emailArray.splice(indexEmail, 1);
        mailCounter ? mailCount() : false;
        haveEmails(emailArray);
        inputEmail.blur();
      }
    }); // create input for write emails

    var inputEmail = createEl('div', {
      'class': 'inputemail_emailseditor',
      'contenteditable': true
    }, ' ');
    editorWrapper.append(inputEmail); // insert placeholder in input

    var inputEmailPlaceholder = "<span class='inputemailplaceholder_emailseditor'>".concat(placeholder, "</span>");
    inputEmail.innerHTML = inputEmailPlaceholder;
    inputEmail.addEventListener('click', function () {
      if (inputEmail.querySelector('span') && inputEmail.querySelector('span').innerHTML === placeholder) {
        inputEmail.innerHTML = "";
      }
    });
    inputEmail.addEventListener('blur', function () {
      if (inputEmail.querySelector('span') == null && !inputEmail.innerHTML) {
        inputEmail.innerHTML = inputEmailPlaceholder;
      } else {
        pushArrayEmail();
        inputEmail.innerHTML = inputEmailPlaceholder;
      }
    }); // input event

    inputEmail.addEventListener("input", function () {
      if (inputEmail.innerHTML.indexOf(",") > -1) {
        pushArrayEmail();
      }
    }); // event for keydown "Enter"

    inputEmail.addEventListener('keydown', function (event) {
      var keyNum;

      if (window.event) {
        keyNum = window.event.keyCode;
      } else if (e) {
        keyNum = e.which;
      }

      if (keyNum === 13) {
        event.preventDefault();
        pushArrayEmail();
      }
    });
    var footerWrapper = createEl('div', {
      'class': 'footer_emailseditor'
    }); // button Add Email

    var addEmail = createEl('button', {
      'class': 'addemail_emailseditor'
    }, 'Add email');
    addEmail.addEventListener('click', addEmailRandom);
    var getEmailCount = createEl('button', {
      'class': 'getemailscount__emailseditor'
    }, 'Get emails count');
    getEmailCount.addEventListener("click", function () {
      var quantityValidEmail = 0;
      emailArray.map(function (item) {
        if (regxEmail.test(item)) {
          quantityValidEmail += 1;
        }
      });
      quantityValidEmail > 0 ? alert("Valid Email: " + quantityValidEmail) : alert("Not valid Email");
    }); // footer append

    footerWrapper.append(addEmail, getEmailCount); // main append

    wrapperEmailsEditor.append(headWrapper, footerWrapper);
    document.getElementById(id).append(wrapperEmailsEditor); // Option: input counter

    var inputCounter = createEl('p', {
      'class': 'inputcounter_emailseditor'
    }, emailArray.length);

    if (btnDeleteInvalid) {
      var btnDel = createEl('button', {
        'class': 'btndel_emailseditor'
      }, 'Delete all invalid emails');
      footerWrapper.append(btnDel);
      btnDel.addEventListener('click', function () {
        var validEmailArray = emailArray.filter(function (item) {
          return regxEmail.test(item);
        });
        emailArray = validEmailArray;
        generateEmailList();
        mailCount();
      });
    }

    window.addEventListener("load", function () {
      generateEmailList();
      mailCountCreate();
      setList();
      mailCount();
    });
  }
} // Constructor Create Elements


function createEl(tag, attributes, inner) {
  var element = document.createElement(tag);

  if (attributes) {
    for (var key in attributes) {
      element.setAttribute(key, attributes[key]);
    }
  }

  if (inner) {
    element.innerHTML = inner;
  }

  return element;
}